<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>irrBullet: IRigidBody Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>IRigidBody Class Reference</h1><!-- doxytag: class="IRigidBody" --><!-- doxytag: inherits="ICollisionObject" -->
<p>The rigid body is the main type for all "hard" simulation objects (The opposite of a soft body).  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="rigidbody_8h_source.html">rigidbody.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IRigidBody:</div>
<div class="dynsection">
 <div class="center">
  <img src="class_i_rigid_body.png" usemap="#IRigidBody_map" alt=""/>
  <map id="IRigidBody_map" name="IRigidBody_map">
<area href="class_i_collision_object.html" alt="ICollisionObject" shape="rect" coords="0,56,102,80"/>
<area href="class_i_property_holder.html" alt="IPropertyHolder" shape="rect" coords="0,0,102,24"/>
</map>
 </div>
</div>

<p><a href="class_i_rigid_body-members.html">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ab250d7cadc485e52a5148d59cbaa2cdb">IRigidBody</a> (<a class="el" href="class_i_collision_shape.html">ICollisionShape</a> *collShape)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a1ce93719471a5cabb0ab7414f31190de">IRigidBody</a> (<a class="el" href="struct_s_rigid_body_construction_info.html">SRigidBodyConstructionInfo</a> info)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a95f6c9beab0071c4f174ea1aa86722e3">~IRigidBody</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a16f980f1d449555fa12bcf5f79beea28">translate</a> (const irr::core::vector3df &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a7bc19577eb5aae98ec4ef4a5d8d24ba9">updateDeactivation</a> (irr::f32 timeStep)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a876a63ecfe8e5a48d3bc217fe8548447">wantsSleeping</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac0ef351d0e8bfb9e97e5b0ef64507dfb">getAabb</a> (irr::core::vector3df &amp;aabbMin, irr::core::vector3df &amp;aabbMax) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ab76d7954f8eed12a954f3295f95f92ad">setLinearVelocity</a> (const irr::core::vector3df &amp;linVel, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a986902c31ec618ca59198cb1b71acace">setAngularVelocity</a> (const irr::core::vector3df &amp;angVel, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a62cbfc8dd28911e46b584270f96f2676">saveKinematicState</a> (irr::f32 step)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a949a341e06c500b96a0a5221633f9aff">applyCentralForce</a> (const irr::core::vector3df &amp;force, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Applies a force from the center of the object.  <a href="#a949a341e06c500b96a0a5221633f9aff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a38b6a14233840a967162e7c09150dc03">applyForce</a> (const irr::core::vector3df &amp;force, const irr::core::vector3df &amp;relPos, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac11f5990d8fc6046c18e5c183d754b19">applyCentralImpulse</a> (const irr::core::vector3df &amp;impulse, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This can be thought of as one quick application of force to induce linear motion.  <a href="#ac11f5990d8fc6046c18e5c183d754b19"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac30d28e431bd266972a57ac4f2985c8d">applyImpulse</a> (const irr::core::vector3df &amp;impulse, const irr::core::vector3df &amp;relPos, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a0ec0685ca40927c82c5e8eb1270333ae">applyTorque</a> (const irr::core::vector3df &amp;torque, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#acd151f0b6dcc8a4067b2e9d0ed442aa1">applyTorqueImpulse</a> (const irr::core::vector3df &amp;torque, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> transformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This can be thought of as one quick application of force to induce angular motion (torque).  <a href="#acd151f0b6dcc8a4067b2e9d0ed442aa1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a62a0dc12a34d779bd862b4b68794aebe">internalApplyImpulse</a> (const irr::core::vector3df &amp;linearComponent, const irr::core::vector3df &amp;angularComponent, irr::f32 impulseMagnitude, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> linTransformSpace=ERBTS_WORLD, <a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a> angTransformSpace=ERBTS_WORLD)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a597d1cc50f3a00df7e4bb69d30caa5da">clearForces</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a5276f7e08c473b1abaedff7d8b7cd381">updateInertiaTensor</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a4b962fdb8213fb6af0bab4d2c541025e">setDamping</a> (const irr::f32 lin_damping, const irr::f32 ang_damping)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a98cdc70debc939aae6ccce85f33978b8">applyGravity</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ae2cd998900a43145ef817f8f05da0b63">setGravity</a> (const irr::core::vector3df &amp;grav)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a4e346d652eb9217c4cf263ef6a5f20b8">applyDamping</a> (irr::f32 timeStep)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac6fe4cadc25cda3601eee8005e874cd1">setMassProps</a> (irr::f32 mass, const irr::core::vector3df &amp;inertia)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#add7825ca3e5cf3b6f90a9bb80cf36e3e">setLinearFactor</a> (const irr::core::vector3df &amp;linearFactor)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ade2ed58bf706c0d7173d8bb52fbbd06b">setInvInertiaDiagLocal</a> (const irr::core::vector3df &amp;diagInvInertia)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a69adf00b389fce77921f118ecd4a4056">setSleepingThresholds</a> (irr::f32 linear, irr::f32 angular)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a2c9fb03d3dce6bc4b91067e3d938ca65">setAngularFactor</a> (const irr::core::vector3df &amp;angFac)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac8534556d590a7f0f144e30c2172c318">setWorldTransform</a> (irr::core::matrix4 irrmat)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the new world transform of this object. (rotation and position).  <a href="#ac8534556d590a7f0f144e30c2172c318"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a0847288415e4c59f649a8fcd161b52bd">setAngularFactor</a> (irr::f32 angFac)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">btRigidBody *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a715facacf50933fc95b30267628afc9a">getPointer</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::matrix4&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ad226bf80f0d241771ba20a2e0806ca29">getWorldTransform</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ab83e293d5ba5a4b4b8119899117b26d7">getLinearVelocity</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#af958fb855ac87d479638a6a64ee78c47">getAngularVelocity</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#af00445868973aff938a2291325ac0c50">getVelocityInLocalPoint</a> (const irr::core::vector3df &amp;relPos) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#afeb7af54d02cc385b3741830ed7d9838">computeImpulseDenominator</a> (const irr::core::vector3df &amp;pos, const irr::core::vector3df &amp;normal) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a7fc7afcf3bd4d456ff712f2bcea52b4f">computeAngularImpulseDenominator</a> (const irr::core::vector3df &amp;axis) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#af0a372539088d04bb6cdc951afc0cced">getGravity</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a17c9877bcea31a4723ca02831665b25a">getLinearDamping</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a070e939ab1c0d37f1b9b6cad696da20b">getAngularDamping</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ac4aff60cd393c1358ed2f54d6f62337f">getLinearSleepingThreshold</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#af1b5aef6c29e91e924f8f3f1cc4155b0">getAngularSleepingThreshold</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ae421a838ccccb1bdc6c3550d8a128e11">getLinearFactor</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::f32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#aa766fdcad6492fc30bc582ed766a0865">getInvMass</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a873390fa8c152a77b8a03b41a7c826ad">integrateVelocities</a> (irr::f32 step)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a7a6f0272f0ed396d91fa758eb3bf3f6c">getTotalForce</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a5a10f309cd17b869aa6f57275b8d9f5d">getTotalTorque</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#afaf4dab9c58a148c2c52687af974b2f5">getInvInertiaDiagLocal</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::vector3df&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a782aa19b6666ddf7ec81b4bd4f3ee51c">getAngularFactor</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a38f6560144d9929412f496c63cc344d3">isInWorld</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#a49d7d15866d331f1cee239f763f62438">checkCollideWithOverride</a> (<a class="el" href="class_i_collision_object.html">ICollisionObject</a> *co)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::u32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ae2219b20beadb2babbb190a711a6c522">getNumConstraintRefs</a> () const </td></tr>
<tr><td colspan="2"><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">irr::core::matrix4&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_rigid_body.html#ad9244be2968c2807466172849fe05bea">worldTransform</a></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>The rigid body is the main type for all "hard" simulation objects (The opposite of a soft body). </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab250d7cadc485e52a5148d59cbaa2cdb"></a><!-- doxytag: member="IRigidBody::IRigidBody" ref="ab250d7cadc485e52a5148d59cbaa2cdb" args="(ICollisionShape *collShape)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">IRigidBody::IRigidBody </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_i_collision_shape.html">ICollisionShape</a> *&nbsp;</td>
          <td class="paramname"> <em>collShape</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>collShape</em>&nbsp;</td><td>The collision shape for this body to use. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1ce93719471a5cabb0ab7414f31190de"></a><!-- doxytag: member="IRigidBody::IRigidBody" ref="a1ce93719471a5cabb0ab7414f31190de" args="(SRigidBodyConstructionInfo info)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">IRigidBody::IRigidBody </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_s_rigid_body_construction_info.html">SRigidBodyConstructionInfo</a>&nbsp;</td>
          <td class="paramname"> <em>info</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a95f6c9beab0071c4f174ea1aa86722e3"></a><!-- doxytag: member="IRigidBody::~IRigidBody" ref="a95f6c9beab0071c4f174ea1aa86722e3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">IRigidBody::~IRigidBody </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a949a341e06c500b96a0a5221633f9aff"></a><!-- doxytag: member="IRigidBody::applyCentralForce" ref="a949a341e06c500b96a0a5221633f9aff" args="(const irr::core::vector3df &amp;force, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyCentralForce </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Applies a force from the center of the object. </p>

</div>
</div>
<a class="anchor" id="ac11f5990d8fc6046c18e5c183d754b19"></a><!-- doxytag: member="IRigidBody::applyCentralImpulse" ref="ac11f5990d8fc6046c18e5c183d754b19" args="(const irr::core::vector3df &amp;impulse, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyCentralImpulse </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>impulse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This can be thought of as one quick application of force to induce linear motion. </p>

</div>
</div>
<a class="anchor" id="a4e346d652eb9217c4cf263ef6a5f20b8"></a><!-- doxytag: member="IRigidBody::applyDamping" ref="a4e346d652eb9217c4cf263ef6a5f20b8" args="(irr::f32 timeStep)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyDamping </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>timeStep</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a38b6a14233840a967162e7c09150dc03"></a><!-- doxytag: member="IRigidBody::applyForce" ref="a38b6a14233840a967162e7c09150dc03" args="(const irr::core::vector3df &amp;force, const irr::core::vector3df &amp;relPos, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyForce </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>relPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Applies a force from a relative position of the object. This can be useful for things such as the thrust from several aircraft engines, rockets, etc. </p>

</div>
</div>
<a class="anchor" id="a98cdc70debc939aae6ccce85f33978b8"></a><!-- doxytag: member="IRigidBody::applyGravity" ref="a98cdc70debc939aae6ccce85f33978b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyGravity </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac30d28e431bd266972a57ac4f2985c8d"></a><!-- doxytag: member="IRigidBody::applyImpulse" ref="ac30d28e431bd266972a57ac4f2985c8d" args="(const irr::core::vector3df &amp;impulse, const irr::core::vector3df &amp;relPos, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyImpulse </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>impulse</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>relPos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This is the same as applyCentralImpulse, with the exception that it applies the force from a relative position of the object. </p>

</div>
</div>
<a class="anchor" id="a0ec0685ca40927c82c5e8eb1270333ae"></a><!-- doxytag: member="IRigidBody::applyTorque" ref="a0ec0685ca40927c82c5e8eb1270333ae" args="(const irr::core::vector3df &amp;torque, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyTorque </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>torque</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acd151f0b6dcc8a4067b2e9d0ed442aa1"></a><!-- doxytag: member="IRigidBody::applyTorqueImpulse" ref="acd151f0b6dcc8a4067b2e9d0ed442aa1" args="(const irr::core::vector3df &amp;torque, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::applyTorqueImpulse </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>torque</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This can be thought of as one quick application of force to induce angular motion (torque). </p>

</div>
</div>
<a class="anchor" id="a49d7d15866d331f1cee239f763f62438"></a><!-- doxytag: member="IRigidBody::checkCollideWithOverride" ref="a49d7d15866d331f1cee239f763f62438" args="(ICollisionObject *co)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IRigidBody::checkCollideWithOverride </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_i_collision_object.html">ICollisionObject</a> *&nbsp;</td>
          <td class="paramname"> <em>co</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a597d1cc50f3a00df7e4bb69d30caa5da"></a><!-- doxytag: member="IRigidBody::clearForces" ref="a597d1cc50f3a00df7e4bb69d30caa5da" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::clearForces </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7fc7afcf3bd4d456ff712f2bcea52b4f"></a><!-- doxytag: member="IRigidBody::computeAngularImpulseDenominator" ref="a7fc7afcf3bd4d456ff712f2bcea52b4f" args="(const irr::core::vector3df &amp;axis) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">irr::f32 IRigidBody::computeAngularImpulseDenominator </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>axis</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afeb7af54d02cc385b3741830ed7d9838"></a><!-- doxytag: member="IRigidBody::computeImpulseDenominator" ref="afeb7af54d02cc385b3741830ed7d9838" args="(const irr::core::vector3df &amp;pos, const irr::core::vector3df &amp;normal) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">irr::f32 IRigidBody::computeImpulseDenominator </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>normal</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac0ef351d0e8bfb9e97e5b0ef64507dfb"></a><!-- doxytag: member="IRigidBody::getAabb" ref="ac0ef351d0e8bfb9e97e5b0ef64507dfb" args="(irr::core::vector3df &amp;aabbMin, irr::core::vector3df &amp;aabbMax) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::getAabb </td>
          <td>(</td>
          <td class="paramtype">irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>aabbMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>aabbMax</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a070e939ab1c0d37f1b9b6cad696da20b"></a><!-- doxytag: member="IRigidBody::getAngularDamping" ref="a070e939ab1c0d37f1b9b6cad696da20b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">f32 IRigidBody::getAngularDamping </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a782aa19b6666ddf7ec81b4bd4f3ee51c"></a><!-- doxytag: member="IRigidBody::getAngularFactor" ref="a782aa19b6666ddf7ec81b4bd4f3ee51c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getAngularFactor </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af1b5aef6c29e91e924f8f3f1cc4155b0"></a><!-- doxytag: member="IRigidBody::getAngularSleepingThreshold" ref="af1b5aef6c29e91e924f8f3f1cc4155b0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">f32 IRigidBody::getAngularSleepingThreshold </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af958fb855ac87d479638a6a64ee78c47"></a><!-- doxytag: member="IRigidBody::getAngularVelocity" ref="af958fb855ac87d479638a6a64ee78c47" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getAngularVelocity </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af0a372539088d04bb6cdc951afc0cced"></a><!-- doxytag: member="IRigidBody::getGravity" ref="af0a372539088d04bb6cdc951afc0cced" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getGravity </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afaf4dab9c58a148c2c52687af974b2f5"></a><!-- doxytag: member="IRigidBody::getInvInertiaDiagLocal" ref="afaf4dab9c58a148c2c52687af974b2f5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getInvInertiaDiagLocal </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa766fdcad6492fc30bc582ed766a0865"></a><!-- doxytag: member="IRigidBody::getInvMass" ref="aa766fdcad6492fc30bc582ed766a0865" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">f32 IRigidBody::getInvMass </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a17c9877bcea31a4723ca02831665b25a"></a><!-- doxytag: member="IRigidBody::getLinearDamping" ref="a17c9877bcea31a4723ca02831665b25a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">f32 IRigidBody::getLinearDamping </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae421a838ccccb1bdc6c3550d8a128e11"></a><!-- doxytag: member="IRigidBody::getLinearFactor" ref="ae421a838ccccb1bdc6c3550d8a128e11" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getLinearFactor </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac4aff60cd393c1358ed2f54d6f62337f"></a><!-- doxytag: member="IRigidBody::getLinearSleepingThreshold" ref="ac4aff60cd393c1358ed2f54d6f62337f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">f32 IRigidBody::getLinearSleepingThreshold </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab83e293d5ba5a4b4b8119899117b26d7"></a><!-- doxytag: member="IRigidBody::getLinearVelocity" ref="ab83e293d5ba5a4b4b8119899117b26d7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getLinearVelocity </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae2219b20beadb2babbb190a711a6c522"></a><!-- doxytag: member="IRigidBody::getNumConstraintRefs" ref="ae2219b20beadb2babbb190a711a6c522" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u32 IRigidBody::getNumConstraintRefs </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The number of constraints that are being referenced by this object. Constraints include raycast vehicles, springs, etc. </dd></dl>

</div>
</div>
<a class="anchor" id="a715facacf50933fc95b30267628afc9a"></a><!-- doxytag: member="IRigidBody::getPointer" ref="a715facacf50933fc95b30267628afc9a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">btRigidBody* IRigidBody::getPointer </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>A pointer to the underlying btRigidBody. </dd></dl>

<p>Reimplemented from <a class="el" href="class_i_collision_object.html#a9d0c09d1297e047f3dc48cb7cc89ad82">ICollisionObject</a>.</p>

</div>
</div>
<a class="anchor" id="a7a6f0272f0ed396d91fa758eb3bf3f6c"></a><!-- doxytag: member="IRigidBody::getTotalForce" ref="a7a6f0272f0ed396d91fa758eb3bf3f6c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getTotalForce </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5a10f309cd17b869aa6f57275b8d9f5d"></a><!-- doxytag: member="IRigidBody::getTotalTorque" ref="a5a10f309cd17b869aa6f57275b8d9f5d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector3df IRigidBody::getTotalTorque </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af00445868973aff938a2291325ac0c50"></a><!-- doxytag: member="IRigidBody::getVelocityInLocalPoint" ref="af00445868973aff938a2291325ac0c50" args="(const irr::core::vector3df &amp;relPos) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">irr::core::vector3df IRigidBody::getVelocityInLocalPoint </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>relPos</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad226bf80f0d241771ba20a2e0806ca29"></a><!-- doxytag: member="IRigidBody::getWorldTransform" ref="ad226bf80f0d241771ba20a2e0806ca29" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">irr::core::matrix4 IRigidBody::getWorldTransform </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>In irrBullet, irr::core::matrix4 takes the place of Bullet's btTransform. <a class="el" href="class_i_rigid_body.html#ad226bf80f0d241771ba20a2e0806ca29">getWorldTransform()</a> will return a btTransform in Bullet, but returns a matrix4 in irrBullet. This matrix includes rotation and position. </p>

</div>
</div>
<a class="anchor" id="a873390fa8c152a77b8a03b41a7c826ad"></a><!-- doxytag: member="IRigidBody::integrateVelocities" ref="a873390fa8c152a77b8a03b41a7c826ad" args="(irr::f32 step)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::integrateVelocities </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>step</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a62a0dc12a34d779bd862b4b68794aebe"></a><!-- doxytag: member="IRigidBody::internalApplyImpulse" ref="a62a0dc12a34d779bd862b4b68794aebe" args="(const irr::core::vector3df &amp;linearComponent, const irr::core::vector3df &amp;angularComponent, irr::f32 impulseMagnitude, ERBTransformSpace linTransformSpace=ERBTS_WORLD, ERBTransformSpace angTransformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::internalApplyImpulse </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>linearComponent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>angularComponent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>impulseMagnitude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>linTransformSpace</em> = <code>ERBTS_WORLD</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>angTransformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This simply combines applyImpulse and applyTorqueImpulse into one function. Impulses are useful for things like projectiles or forces that may or may not need to be continually applied. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>linTransformSpace</em>&nbsp;</td><td>The space to apply the linear impulse. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angTransformSpace</em>&nbsp;</td><td>The space to apply the angular impulse. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a38f6560144d9929412f496c63cc344d3"></a><!-- doxytag: member="IRigidBody::isInWorld" ref="a38f6560144d9929412f496c63cc344d3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IRigidBody::isInWorld </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether or not the rigid body is in the dynamics world being simulated. </dd></dl>

</div>
</div>
<a class="anchor" id="a62cbfc8dd28911e46b584270f96f2676"></a><!-- doxytag: member="IRigidBody::saveKinematicState" ref="a62cbfc8dd28911e46b584270f96f2676" args="(irr::f32 step)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::saveKinematicState </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>step</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a0847288415e4c59f649a8fcd161b52bd"></a><!-- doxytag: member="IRigidBody::setAngularFactor" ref="a0847288415e4c59f649a8fcd161b52bd" args="(irr::f32 angFac)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setAngularFactor </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>angFac</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2c9fb03d3dce6bc4b91067e3d938ca65"></a><!-- doxytag: member="IRigidBody::setAngularFactor" ref="a2c9fb03d3dce6bc4b91067e3d938ca65" args="(const irr::core::vector3df &amp;angFac)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setAngularFactor </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>angFac</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a986902c31ec618ca59198cb1b71acace"></a><!-- doxytag: member="IRigidBody::setAngularVelocity" ref="a986902c31ec618ca59198cb1b71acace" args="(const irr::core::vector3df &amp;angVel, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setAngularVelocity </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>angVel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Angular velocity is the speed at which an object rotates. The velocity set here will remain the same throughout the object's lifetime unless changed by other means.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>transformSpace</em>&nbsp;</td><td>If this parameter is set to ERBTS_LOCAL, it will only apply the velocity in the local space at the time the function was called. The velocity will not be applied in current local directions of the rigid body. If you wish to achieve this, please see <a class="el" href="class_i_rigid_body.html#a0ec0685ca40927c82c5e8eb1270333ae">applyTorque()</a>, <a class="el" href="class_i_rigid_body.html#acd151f0b6dcc8a4067b2e9d0ed442aa1" title="This can be thought of as one quick application of force to induce angular motion...">applyTorqueImpulse()</a> and <a class="el" href="class_i_rigid_body.html#a62a0dc12a34d779bd862b4b68794aebe">internalApplyImpulse()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4b962fdb8213fb6af0bab4d2c541025e"></a><!-- doxytag: member="IRigidBody::setDamping" ref="a4b962fdb8213fb6af0bab4d2c541025e" args="(const irr::f32 lin_damping, const irr::f32 ang_damping)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setDamping </td>
          <td>(</td>
          <td class="paramtype">const irr::f32&nbsp;</td>
          <td class="paramname"> <em>lin_damping</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::f32&nbsp;</td>
          <td class="paramname"> <em>ang_damping</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae2cd998900a43145ef817f8f05da0b63"></a><!-- doxytag: member="IRigidBody::setGravity" ref="ae2cd998900a43145ef817f8f05da0b63" args="(const irr::core::vector3df &amp;grav)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setGravity </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>grav</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ade2ed58bf706c0d7173d8bb52fbbd06b"></a><!-- doxytag: member="IRigidBody::setInvInertiaDiagLocal" ref="ade2ed58bf706c0d7173d8bb52fbbd06b" args="(const irr::core::vector3df &amp;diagInvInertia)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setInvInertiaDiagLocal </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>diagInvInertia</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="add7825ca3e5cf3b6f90a9bb80cf36e3e"></a><!-- doxytag: member="IRigidBody::setLinearFactor" ref="add7825ca3e5cf3b6f90a9bb80cf36e3e" args="(const irr::core::vector3df &amp;linearFactor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setLinearFactor </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>linearFactor</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab76d7954f8eed12a954f3295f95f92ad"></a><!-- doxytag: member="IRigidBody::setLinearVelocity" ref="ab76d7954f8eed12a954f3295f95f92ad" args="(const irr::core::vector3df &amp;linVel, ERBTransformSpace transformSpace=ERBTS_WORLD)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setLinearVelocity </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>linVel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="rigidbody_8h.html#aaf81f9959cc89669d504937cce30753f">ERBTransformSpace</a>&nbsp;</td>
          <td class="paramname"> <em>transformSpace</em> = <code>ERBTS_WORLD</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Linear velocity is motion in any direction. The velocity set here will remain the same throughout the object's lifetime unless changed by other means.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>transformSpace</em>&nbsp;</td><td>If this parameter is set to ERBTS_LOCAL, it will only apply the velocity in the local space at the time the function was called. The velocity will not be applied in current local directions of the rigid body. If you wish to achieve this, please see <a class="el" href="class_i_rigid_body.html#a949a341e06c500b96a0a5221633f9aff" title="Applies a force from the center of the object.">applyCentralForce()</a>, <a class="el" href="class_i_rigid_body.html#a38b6a14233840a967162e7c09150dc03">applyForce()</a>, <a class="el" href="class_i_rigid_body.html#ac11f5990d8fc6046c18e5c183d754b19" title="This can be thought of as one quick application of force to induce linear motion...">applyCentralImpulse()</a>, <a class="el" href="class_i_rigid_body.html#ac30d28e431bd266972a57ac4f2985c8d">applyImpulse()</a>, and <a class="el" href="class_i_rigid_body.html#a62a0dc12a34d779bd862b4b68794aebe">internalApplyImpulse()</a>.</td></tr>
  </table>
  </dd>
</dl>
<p>However, calling <a class="el" href="class_i_rigid_body.html#ab76d7954f8eed12a954f3295f95f92ad">setLinearVelocity()</a> in local space would be great for something such as an unguided rocket that only needs one direction at the time of its creation. </p>

</div>
</div>
<a class="anchor" id="ac6fe4cadc25cda3601eee8005e874cd1"></a><!-- doxytag: member="IRigidBody::setMassProps" ref="ac6fe4cadc25cda3601eee8005e874cd1" args="(irr::f32 mass, const irr::core::vector3df &amp;inertia)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setMassProps </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>mass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>inertia</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a69adf00b389fce77921f118ecd4a4056"></a><!-- doxytag: member="IRigidBody::setSleepingThresholds" ref="a69adf00b389fce77921f118ecd4a4056" args="(irr::f32 linear, irr::f32 angular)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setSleepingThresholds </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>linear</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>angular</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac8534556d590a7f0f144e30c2172c318"></a><!-- doxytag: member="IRigidBody::setWorldTransform" ref="ac8534556d590a7f0f144e30c2172c318" args="(irr::core::matrix4 irrmat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::setWorldTransform </td>
          <td>(</td>
          <td class="paramtype">irr::core::matrix4&nbsp;</td>
          <td class="paramname"> <em>irrmat</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Sets the new world transform of this object. (rotation and position). </p>

</div>
</div>
<a class="anchor" id="a16f980f1d449555fa12bcf5f79beea28"></a><!-- doxytag: member="IRigidBody::translate" ref="a16f980f1d449555fa12bcf5f79beea28" args="(const irr::core::vector3df &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::translate </td>
          <td>(</td>
          <td class="paramtype">const irr::core::vector3df &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7bc19577eb5aae98ec4ef4a5d8d24ba9"></a><!-- doxytag: member="IRigidBody::updateDeactivation" ref="a7bc19577eb5aae98ec4ef4a5d8d24ba9" args="(irr::f32 timeStep)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::updateDeactivation </td>
          <td>(</td>
          <td class="paramtype">irr::f32&nbsp;</td>
          <td class="paramname"> <em>timeStep</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5276f7e08c473b1abaedff7d8b7cd381"></a><!-- doxytag: member="IRigidBody::updateInertiaTensor" ref="a5276f7e08c473b1abaedff7d8b7cd381" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IRigidBody::updateInertiaTensor </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a876a63ecfe8e5a48d3bc217fe8548447"></a><!-- doxytag: member="IRigidBody::wantsSleeping" ref="a876a63ecfe8e5a48d3bc217fe8548447" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IRigidBody::wantsSleeping </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>If this object is about to be deactivated due to a certain time of inactivity. </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ad9244be2968c2807466172849fe05bea"></a><!-- doxytag: member="IRigidBody::worldTransform" ref="ad9244be2968c2807466172849fe05bea" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">irr::core::matrix4 <a class="el" href="class_i_rigid_body.html#ad9244be2968c2807466172849fe05bea">IRigidBody::worldTransform</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>C:/Program Files (x86)/CodeBlocks/Library/irrBullet/source/<a class="el" href="rigidbody_8h_source.html">rigidbody.h</a></li>
<li>C:/Program Files (x86)/CodeBlocks/Library/irrBullet/source/<a class="el" href="rigidbody_8cpp.html">rigidbody.cpp</a></li>
</ul>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
</body>
</html>
