#include "motionstate.h"

using namespace irr;
using namespace core;
using namespace scene;

IMotionState::IMotionState(const btTransform &initialPos)
{
    worldTransform = initialPos;
}

void IMotionState::getWorldTransform(btTransform &worldTrans) const
{
    /*if(object->hasParent == true)
    {
        btTransform tempTrans = object->body->getWorldTransform();

        btVector3 pos = object->getParent()->body->getWorldTransform().getOrigin() - object->body->getWorldTransform().getOrigin();

        tempTrans.setOrigin(pos);

        worldTrans = tempTrans;
    }*/



    worldTrans = worldTransform;
}

void IMotionState::setWorldTransform(const btTransform &worldTrans)
{
    if(node != 0)
    {
        /*if(object->hasParent == true)
        {
            btTransform tempTrans = worldTrans;

            btVector3 pos = object->getParent()->body->getWorldTransform().getOrigin() + object->body->getWorldTransform().getOrigin();

            tempTrans.setOrigin(pos);

            applyTransformToVisualModel(tempTrans);

            worldTransform = tempTrans;

            //printf(object->worldObjectName.c_str());
        }*/

        btScalar mat[16];
        worldTrans.getOpenGLMatrix(mat);

        irr::core::matrix4 matr;
        matr.setM(mat);

        node->setRotation(matr.getRotationDegrees());
        node->setPosition(matr.getTranslation());

        worldTransform = worldTrans;
    }

    else
    {
        if(failed == false)
        {
            wchar_t *str = 0;

            wsprintfW( str, L"Object ( %s ) could not be updated.\n"),
                node->getName();
            MessageBoxW(0, str, L"Critical Error", MB_OK | MB_ICONERROR );
                failed = true;
        }

    }
}


IMotionState::~IMotionState()
{
}

