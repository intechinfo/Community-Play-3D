<!-- This comment will put IE 6, 7 and 8 in quirks mode -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>irrBullet: irrBullet 0.1.4 wrapper documentation</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.6.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li class="current"><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <img id="MSearchSelect" src="search/search.png"
             onmouseover="return searchBox.OnSearchSelectShow()"
             onmouseout="return searchBox.OnSearchSelectHide()"
             alt=""/>
        <input type="text" id="MSearchField" value="Search" accesskey="S"
             onfocus="searchBox.OnSearchFieldFocus(true)" 
             onblur="searchBox.OnSearchFieldFocus(false)" 
             onkeyup="searchBox.OnSearchFieldChange(event)"/>
        <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
        </div>
      </li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>irrBullet 0.1.4 wrapper documentation </h1><h3 class="version">0.1.4 </h3><h2><a class="anchor" id="intro">
Introduction</a></h2>
<p>Welcome to the irrBullet physics wrapper documentation.</p>
<p>Here you will find all the information you will need to integrate physics into your application using irrBullet, which wraps the Bullet physics library with the Irrlicht rendering engine. irrBullet is easy to use, has a similar programming style with Irrlicht's style, and is powerful. It also adds features that are game-specific to let the physics programmer focus on actually doing the fun part of physics, not worrying about how to integrate and optimize it.</p>
<p>It does not simply bind Bullet with Irrlicht, it includes unique features to help with the integration and prototyping of physics simulation!</p>
<p>If you have any questions or suggestions, please email them to me at fighterstw (at) hotmail.com.</p>
<h2><a class="anchor" id="irrbulletexample">
irrBullet Example</a></h2>
<p>Using irrBullet with Irrlicht is very straight-forward and simple. This does not mean it is not powerful, however.</p>
<p>Here's a simple integration:</p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">    #include &lt;irrlicht.h&gt;</span>
<span class="preprocessor">    #include &lt;<a class="code" href="irrbullet_8h.html">irrbullet.h</a>&gt;</span>

    <span class="keyword">using namespace </span>irr;
    <span class="keyword">using namespace </span>core;
    <span class="keyword">using namespace </span>scene;
    <span class="keyword">using namespace </span>video;

    <span class="keywordtype">int</span> main()
    {
        IrrlichtDevice *device = createDevice( video::EDT_OPENGL, dimension2d&lt;u32&gt;(640, 480), 16, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, 0);

        <span class="keywordflow">if</span> (device == 0)
            <span class="keywordflow">return</span> 1;

        device-&gt;setWindowCaption(L<span class="stringliteral">&quot;irrBullet Example&quot;</span>);

        <span class="comment">// Create the irrBullet world</span>
        world = <a class="code" href="irrbullet_8h.html#ac57c4860f159b92ea33f68094aff3177">createIrrBulletWorld</a>(device, <span class="keyword">true</span>, <span class="keyword">true</span>);

        world-&gt;setDebugMode(<a class="code" href="common_8h.html#a332d3048abfd724412a9afbb6613b0c7afab84cbe8dbfd262adbb5d1eb7719e46">EPDM_DrawAabb</a> |
            <a class="code" href="common_8h.html#a332d3048abfd724412a9afbb6613b0c7a50bc1d9b31fd7b08736221526f75b4d8">EPDM_DrawContactPoints</a>);


        <span class="comment">// Create a static triangle mesh object</span>
        IMeshSceneNode *Node = smgr-&gt;addMeshSceneNode(smgr-&gt;getMesh(<span class="stringliteral">&quot;terrainMain.b3d&quot;</span>)-&gt;getMesh(0));
        Node-&gt;setPosition(vector3df(0,0,0));
        Node-&gt;setMaterialFlag(video::EMF_LIGHTING, <span class="keyword">false</span>);
        Node-&gt;getMesh()-&gt;setHardwareMappingHint(EHM_STATIC);

        <span class="comment">// For the terrain, instead of adding a cube or sphere shape, we are going to</span>
        <span class="comment">// add a BvhTriangleMeshShape. This is the standard trimesh shape</span>
        <span class="comment">// for static objects. The first parameter is of course the node to control,</span>
        <span class="comment">// the second parameter is the collision mesh, incase you want a low-poly collision mesh,</span>
        <span class="comment">// and the third parameter is the mass.</span>
        <a class="code" href="class_i_collision_shape.html" title="The collision shape defines the geometry of an object, its mass, and its inertia...">ICollisionShape</a> *shape = <span class="keyword">new</span> <a class="code" href="class_i_bvh_triangle_mesh_shape.html" title="The BVH triangle mesh shape is useful for static triangle mesh shapes, such as game...">IBvhTriangleMeshShape</a>(Node, smgr-&gt;getMesh(<span class="stringliteral">&quot;terrainMain.b3d&quot;</span>), 0.0);

        shape-&gt;<a class="code" href="class_i_collision_shape.html#a68aa7abc0969d97a7ce8489ccc5cf2c7">setMargin</a>(0.07);

        <span class="comment">// The rigid body will be placed at the origin of the node that the collision shape is controlling,</span>
        <span class="comment">// so we do not need to set the position of the rigid body after creating it.</span>
        <a class="code" href="class_i_rigid_body.html" title="The rigid body is the main type for all &amp;quot;hard&amp;quot; simulation objects (The...">IRigidBody</a> *terrain = world-&gt;addRigidBody(shape);
        terrain-&gt;<a class="code" href="class_i_rigid_body.html#ae2cd998900a43145ef817f8f05da0b63">setGravity</a>(vector3df(0,0,0));


        <span class="comment">// This will scale both the collision object and the scene node it controls.</span>
        shape-&gt;<a class="code" href="class_i_collision_shape.html#a333b8fc4866ac82199882193eaa935fe">setLocalScaling</a>(vector3df(4,4,4), <a class="code" href="collisionshape_8h.html#a4b6d906ac66535abd34fe17d6e16ddcfa4d7569086ccc5eed64f5d6f186fab466">ESP_BOTH</a>);




        <span class="comment">// When setting a rigid body to a static object, please be sure that you have</span>
        <span class="comment">// that object&#39;s mass set to 0.0. Otherwise, undesired results will occur.</span>
        terrain-&gt;<a class="code" href="class_i_collision_object.html#a2dc50a7a9c8729a5b7110a6fa8043f77">setCollisionFlags</a>(<a class="code" href="collisionobject_8h.html#a2e29ea5f29dd8b011f98967a3a9a6a89aab5b6f3a885808b2e09dd8865e78d570">ECF_STATIC_OBJECT</a>);


        u32 TimeStamp = device-&gt;getTimer()-&gt;getTime(), DeltaTime = 0;


        <span class="keywordflow">while</span>(device-&gt;run())
        {
            driver-&gt;beginScene(<span class="keyword">true</span>, <span class="keyword">true</span>, SColor(255,100,101,140));

            DeltaTime = device-&gt;getTimer()-&gt;getTime() - TimeStamp;
            TimeStamp = device-&gt;getTimer()-&gt;getTime();

            <span class="comment">// Step the simulation with our delta time</span>
            world-&gt;stepSimulation(DeltaTime*0.001f, 120);

            <span class="comment">// Draw the 3d debugging data.</span>
            world-&gt;debugDrawWorld(<span class="keyword">true</span>);

            <span class="comment">// This call will draw the technical properties of the physics simulation</span>
            <span class="comment">// to the GUI environment.</span>
            world-&gt;debugDrawProperties(<span class="keyword">true</span>);


            smgr-&gt;drawAll();
            env-&gt;drawAll();

            driver-&gt;endScene();

        }
        <span class="comment">// We&#39;re done with the IrrBullet world, so we free the memory that it takes up.</span>
        <span class="keyword">delete</span> world;
        device-&gt;drop();

        <span class="keywordflow">return</span> 0;
    }
</pre></div><p>That's it! You now have a pretty basic irrBullet example with a static triangle mesh.</p>
<p>irrBullet is capable of a lot more than what is shown in this example, but it should give you a good idea of how to get started.</p>
<p>Example source code and projects can be found in (&lt;irrBulletDir&gt; / examples), and compiled examples can be found in (&lt;irrBulletDir&gt; / bin / win32_gcc).</p>
<h2><a class="anchor" id="linkerandsearchdirs">
Linker and Search Directories Settings</a></h2>
<p>Before you can begin integrating irrBullet in your application, there are a few things to add to your project first.</p>
<p>Link against these static libraries (included in (&lt;irrBulletDir&gt; / lib), pre-compiled):</p>
<p><b>libirrBullet.a libbulletdynamics.a libbulletsoftbody.a libGIMPACTUtils.a libbulletmath.a libbulletcollision.a</b></p>
<p>This is for most features with GImpact included. Other libs must be linked against for some features, such as libconvexdecomposition.a for decomposing objects.</p>
<p><em>It is important that they are linked against in this order to avoid linker errors.</em></p>
<p>Next, add these directories to your Search Directories list:</p>
<p><b>&lt;irrBulletDirectory&gt;</b></p>
<p><b> &lt;irrBulletDirectory&gt; / include / bheaders / bullet</b></p>
<p>You are now ready to begin the integration process! </p>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr size="1"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
</body>
</html>
