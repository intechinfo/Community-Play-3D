#ifndef __COMMON_H_INCLUDED__
#define __COMMON_H_INCLUDED__

#define BIT(x) (1<<(x)) // For collision masking

#include <irrlicht.h>
#include "Bullet/btBulletDynamicsCommon.h"
#include "Bullet/btBulletCollisionCommon.h"


void QuaternionToEuler(const btQuaternion &TQuat, btVector3 &TEuler);

irr::core::vector3df compensateForNodeType(const irr::core::vector3df &scale, irr::scene::ESCENE_NODE_TYPE type);

btVector3 irrlichtToBulletVector(const irr::core::vector3df &vec);

irr::core::vector3df bulletToIrrlichtVector(const btVector3 &vec);

enum ECollisionFlag
{
    ECF_STATIC_OBJECT = 1,
    ECF_KINEMATIC_OBJECT = 2,
    ECF_NO_CONTACT_RESPONSE = 4,
    ECF_CUSTOM_MATERIAL_CALLBACK = 8,
    ECF_CHARACTER_OBJECT = 16
};


enum ECollisionObjectType
{
  ECOT_COLLISION_OBJECT = 1,
  ECOT_RIGID_BODY,
  ECOT_GHOST_OBJECT,
  ECOT_SOFT_BODY,
  ECOT_HF_FLUID
};


enum irrPhysicsDebugMode
{
  EPDM_NoDebug = 0,
  EPDM_DrawWireframe = 1,
  EPDM_DrawAabb = 2,
  EPDM_DrawFeaturesText = 4,
  EPDM_DrawContactPoints = 8,
  EPDM_NoDeactivation = 16,
  EPDM_NoHelpText = 32,
  EPDM_DrawText = 64,
  EPDM_ProfileTimings = 128,
  EPDM_EnableSatComparison = 256,
  EPDM_DisableBulletLCP = 512,
  EPDM_EnableCCD = 1024,
  EPDM_DrawConstraints = (1 << 11),
  EPDM_DrawConstraintLimits = (1 << 12),
  EPDM_FastWireframe = (1<<13),
  EPDM_MAX_DEBUG_DRAW_MODE
};




#endif // __COMMON_H_INCLUDED__
