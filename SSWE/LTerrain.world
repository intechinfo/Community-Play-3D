<?xml version="1.0"?>

<rootScene>

	<config>

		 <numberOfObjects value="3" />

		 <grid>

			 <accentLineOffset ALO="8" />
			 <size S="1024" />
			 <spacing SP="8" />

		 </grid>

		 <camera>

			 <position X="133.064178" Y="23.572945" Z="177.935486" />
			 <rotation X="11.041044" Y="193.750488" Z="0.000000" />

		 </camera>

		 <fpsCameraSettings>

			 <ellipsoidRadius X="30.000000" Y="60.000000" Z="30.000000" />
			 <gravityPerSecond X="0.000000" Y="-10.000000" Z="0.000000" />
			 <ellipsoidTranslation X="0.000000" Y="0.000000" Z="0.000000" />
			 <slidingValue value="0.000500" />

		 </fpsCameraSettings>

		 <effect>

			 <postProcessingEffect>
				 <file_path path="shaders/GLSL/BlurHP.glsl" />
				 <values>
				 </values>
			 </postProcessingEffect>

			 <postProcessingEffect>
				 <file_path path="shaders/GLSL/BlurVP.glsl" />
				 <values>
				 </values>
			 </postProcessingEffect>

			 <postProcessingEffect>
				 <file_path path="shaders/GLSL/BrightPass.glsl" />
				 <values>
					 <value name="multiplier" val="setReturnedValueAsFloat()

value =  1

returnValue(value, 1)" />
				 </values>
			 </postProcessingEffect>

			 <postProcessingEffect>
				 <file_path path="shaders/GLSL/BloomP.glsl" />
				 <values>
				 </values>
			 </postProcessingEffect>


		 </effect>

		 <materialTypes>

			 <materialType>
				 <pixelShaderType type="0" /> 
				 <vertexShaderType type="0" /> 
				 <baseMaterial type="0" /> 
				 <name cname="TRIPLANAR MAPPING" />
				 <vertex shader=
"//Triplanar coordinate maps with normal maps support
//by Santiago A. Navascues

//Use at your own risk. I make no warranties. 
//If you want to use it, give the proper credits

uniform mat4 matWorld;
uniform vec3 viewPos;
uniform float tileSize;

varying vec2 TexCoordX;
varying vec2 TexCoordY;
varying vec2 TexCoordZ;
varying vec3 ViewDir;
varying mat3 tangentSpace;
     
void main( void )
{
   gl_Position = ftransform();
   vec3 worldPos = (matWorld * gl_Vertex).xyz;//So we obtain the world position
   
   TexCoordX = worldPos.zy/tileSize;//here are our texture coordinates...
   TexCoordY = worldPos.xz/tileSize;
   TexCoordZ = worldPos.xy/tileSize;
   
   //binormal and tangent become normal dependant
   
   vec3 xtan,ytan,ztan;
   vec3 xbin,ybin,zbin;
   
   xtan = vec3(0,0,1);//tangent space for the X aligned plane
   xbin = vec3(0,1,0);
   
   ytan = vec3(1,0,0);//tangent space for the Y aligned plane
   ybin = vec3(0,0,1);
   
   ztan = vec3(1,0,0);//tangent space for the Z aligned plane
   zbin = vec3(0,1,0);
   
   vec3 n = normalize(gl_Normal);
   n*=n;

   vec3 worldBinormal = normalize(xbin*n.x+ybin*n.y+zbin*n.z);//Average Binormal
   vec3 worldTangent = normalize(xtan*n.x+ytan*n.y+ztan*n.z);//Average Tangent

   ViewDir = worldPos-viewPos;
   
   //This is done so it can be rotated freely
   
   worldTangent = (matWorld*vec4(worldTangent,1)).xyz;
   worldBinormal = (matWorld*vec4(worldBinormal,1)).xyz;
   
   //For some odd reason i cannot yet to explain, the normal is oddly altered so the X axis gets always positive
   //Lucky enough, tangent x binormal is by definition the normal, and this solves the issue...

   vec3 worldNormal = normalize(cross(worldTangent,worldBinormal));
   
   tangentSpace[0] = worldTangent;
   tangentSpace[1] = worldBinormal;
   tangentSpace[2] = worldNormal;
}
" />
				 <pixel shader=
"//Note this is the 6 textures version, hence, you will need to recompile Irrlicht if you want
//to use it.

//Can be reduced to a 4 textures version if you sample the baseX instead of the baseZ texture
//and the normalX instead of the normalZ texture.

//And can be reduced further more if you use a single normal map, and sample it from every side
//everytime, leaving space for a shadowmap, the shader does the rest.

//By the way, lighting is performed in worldspace, because otherwise, the normal calculation
//and the rotation support could be too complex.

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float specularPower;
uniform vec3 lightDirection;
uniform float camDepth;

uniform sampler2D baseX;
uniform sampler2D baseY;
//uniform sampler2D baseZ;
uniform sampler2D normalX;
uniform sampler2D normalY;
//uniform sampler2D normalZ;

varying vec2 TexCoordX;
varying vec2 TexCoordY;
varying vec2 TexCoordZ;
varying vec3 ViewDir;
varying mat3 tangentSpace;

void main( void )
{
   float Fog = gl_FragCoord.z/gl_FragCoord.w;
   Fog/=camDepth;

   vec3 normal = tangentSpace[2];
   
   vec3 n = normal;
   n*=n;
   
   vec4 col = texture2D(baseX,TexCoordX)*n.x+
              texture2D(baseY,TexCoordY)*n.y+
              texture2D(baseX,TexCoordZ)*n.z;
   
   vec4 nrm = texture2D(normalX,TexCoordX)*n.x+
              texture2D(normalY,TexCoordY)*n.y+
              texture2D(normalX,TexCoordZ)*n.z;
   
   vec3 realNormal = normalize((2.0*nrm.xyz-1.0)*tangentSpace);
   vec3 lightDir = normalize(lightDirection);
   vec3 viewDir = normalize(ViewDir);
   
   float NdL = max(0.0,dot(realNormal,lightDir));
   
   vec3 reflVect = normalize(reflect(lightDir,realNormal));
   float RdL = max(0.0,dot(reflVect,viewDir));
      
   vec4 fVambient,fVdiffuse,fVspecular;
   
   fVambient = col*ambient;
   fVdiffuse = diffuse*col*NdL;
   fVspecular = specular*pow(RdL,specularPower)*col;
   
   gl_FragColor = mix(fVambient+fVdiffuse+fVspecular,gl_Fog.color,Fog);
       
}
" />
				 <constants value="vmatrix4 matWorld world[0] 0 0 0vfloat tileSize 10vvector3df viewPos camPos4
pvector3df lightDirection 10 100 10pSColori ambiant 255 118 86 86pSColori specular 255 205 209 86pSColori diffuse 255 118 132 204pfloat specularPower 1
pfloat camDepth 2000

pint baseX 0pint baseY 2pint normalX 1pint normalY 3" />
			 </materialType>


		 </materialTypes>

		 <scripts>


		 </scripts>

	</config>



	<scene>

		 <terrain>

			 <path file="/Users/julienmoreau-mathis/Desktop/Soganatsu Studios/Projects/SSWE/SSWE/Height_Maps/mountain.png" />

			 <type esnt="heightMap" />

			 <factory> 


			 </factory> 

			 <name c8name="#map:myName" />

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="Height_Maps/rock.png" />
						 <texture id="1" path="Height_Maps/rockn.png" />
						 <texture id="2" path="Height_Maps/grass.png" />
						 <texture id="3" path="Height_Maps/grassn.png" />
					 <textures>

					 <diffuseColor r="118" g="132" b="204" a="255" />
					 <ambiantColor r="118" g="86" b="86" a="255" />
					 <specularColor r="205" g="209" b="86" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 </materials>
			 <position X="-251.266769" Y="-30.656509" Z="-232.454437" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="0.500000" Y="0.300000" Z="0.500000" />

			 <visible bool="1" />
			 <shadowMode mode="2" />

		 </terrain>

		 <light>

			 <name c8name="#light:1" />

			 <position X="-296.882996" Y="276.516876" Z="146.514709" />
			 <target X="0.000000" Y="0.000000" Z="0.000000" />

			 <diffuseColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />
			 <ambiantColor r="0.000000" g="0.000000" b="0.000000" a="1.000000" />
			 <specularColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />

			 <radius value="2000.000000" />
			 <farValue value="1000.000000" />
			 <autoRecalculate value="0" />

			 <shadows resol="4096" />

			 <lensFlare>
			 </lensFlare>

		 </light>

		 <waterSurface>

			 <mesh path="" />
			 <name c8name="#water:test" />

			 <position X="0.000000" Y="0.000000" Z="0.000000" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="1.000000" Y="1.000000" Z="1.000000" />

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="shaders/Materials/GLSL/Water/data/waterbump.png" />
						 <texture id="1" path="rt" />
						 <texture id="2" path="rt" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="1" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="46" />

			 	 </material>
			 </materials>
			 <visible bool="1" />
			 <shadowMode mode="4" />
			 <shaderPackagePath value="" />
		 </waterSurface>


	</scene>

</rootScene>
