#define __CP3D_MAX_LIGHTS__ 8

float4x4 matWorldInverse; 
float4x4 ModelViewMatrix;
float3 fvLightPosition[__CP3D_MAX_LIGHTS__]; 
float fLightStrength[__CP3D_MAX_LIGHTS__];
float4 fvLightColor[__CP3D_MAX_LIGHTS__]; 
float4 fvAmbient;
float fSpecularPower;
float fSpecularStrength;
float fBumpStrength;
int numLights;

sampler2D baseMap : register(s0);
sampler2D bumpMap : register(s1);

struct VS_OUTPUT
{
    float4 Position            : POSITION1;
    float2 Texcoord            : TEXCOORD0;
    float3 Normal              : TEXCOORD1;
	float4 ObjectPosition	   : TEXCOORD2;
};

float getLengthSQR (float3 vec)
{
   return (vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}

float4 pixelMain( in VS_OUTPUT IN ) : COLOR0
{
	/// Added
	float4x4 LightTransform = ModelViewMatrix; 
	LightTransform = mul(matWorldInverse, LightTransform);

	float3 fvTangent  = -float3(abs(IN.Normal.y) + abs(IN.Normal.z), abs(IN.Normal.x), 0); 
	float3 fvBinormal = cross(fvTangent, IN.Normal);
	float3 fvNormal   = mul( float4(IN.Normal, 1.0), ModelViewMatrix).xyz;
	fvTangent         = mul( float4(cross(fvBinormal, IN.Normal), 1.0), ModelViewMatrix ).xyz;
	fvBinormal        = mul( float4(fvBinormal, 1.0), ModelViewMatrix ).xyz; 

	float4 fvObjectPosition = IN.ObjectPosition;
	float3 fvViewDirection = -fvObjectPosition.xyz;

	float3 ViewDirection = float3(0.0, 0.0, 0.0);
	ViewDirection.x		 = dot( fvTangent, fvViewDirection );
	ViewDirection.y		 = dot( fvBinormal, fvViewDirection ); 
	ViewDirection.z		 = dot( fvNormal, fvViewDirection ); 
	/// End added

	float4 color        = float4(0.0, 0.0, 0.0, 0.0);
	float3  fvNormal2   = tex2D( bumpMap, IN.Texcoord ).yxz;
	float4  fvBaseColor = tex2D( baseMap, IN.Texcoord );
	fvNormal2.xy *= 2.0;
	fvNormal2.xy -= 1.0;
	fvNormal2 = (float3(0.0,0.0,1.0) - fvNormal2) * fBumpStrength + fvNormal2;
	fvNormal2 = normalize(fvNormal2);

	fvViewDirection = normalize( ViewDirection );

	float4 fvTotalAmbient = fvAmbient * fvBaseColor;
	float4 fvTotalDiffuse = float4(0.0, 0.0, 0.0, 0.0);
	float4 fvTotalSpecular = float4(0.0, 0.0, 0.0, 0.0);

	for (int i=0; i < numLights; i++) {
		/// Added
		float4 fvLightPos = mul(float4(fvLightPosition[i], 1.0), LightTransform); 
		float3 fvLightDirection = (fvLightPos.xyz - fvObjectPosition.xyz);
		float LightDistMultiplier = 1.0 / (getLengthSQR(fvLightDirection) / (fLightStrength[i]*10000.0));

		float3 LightDirection = float3(0.0, 0.0, 0.0);
		LightDirection.x  = dot( fvTangent, fvLightDirection.xyz ); 
		LightDirection.y  = dot( fvBinormal, fvLightDirection.xyz ); 
		LightDirection.z  = dot( fvNormal, fvLightDirection.xyz );
		/// End added

		fvLightDirection		  = normalize( LightDirection );
		float fNDotL              = max(dot(fvNormal2, fvLightDirection), 0.0) - 0.1;
		float3 fvReflection       = normalize( ( ( 2.0 * fvNormal2 )  ) - fvLightDirection );  
		float fRDotV              = max( 0.0, dot( fvReflection, fvViewDirection ) );
		fvTotalDiffuse			  += fvLightColor[i] * fNDotL * fvBaseColor * LightDistMultiplier;
		fvTotalSpecular			  += fNDotL * fvLightColor[i] * ( pow( fRDotV, fSpecularPower ) ) * LightDistMultiplier;
	}

	color = (fvTotalAmbient + fvTotalDiffuse + (fvTotalSpecular * fSpecularStrength)); 
	if (color.r>1.0) { color.gb += color.r - 1.0; } 
	if (color.g>1.0) { color.rb += color.g - 1.0; } 
	if (color.b>1.0) { color.rg += color.b - 1.0; } 
   
	return color;
}
