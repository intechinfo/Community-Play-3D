<?xml version="1.0"?>

<rootScene>

	<config>

		 <numberOfObjects value="4" />

		 <grid>

			 <accentLineOffset ALO="8" />
			 <size S="1024" />
			 <spacing SP="8" />

		 </grid>

		 <camera>

			 <position X="40.408897" Y="156.019562" Z="-502.464264" />
			 <rotation X="18.054718" Y="350.714233" Z="0.000000" />

		 </camera>

		 <fpsCameraSettings>

			 <ellipsoidRadius X="5.000000" Y="10.000000" Z="5.000000" />
			 <gravityPerSecond X="0.000000" Y="-10.000000" Z="0.000000" />
			 <ellipsoidTranslation X="0.000000" Y="20.000000" Z="0.000000" />
			 <slidingValue value="0.000500" />

		 </fpsCameraSettings>

		 <effect>


		 </effect>

		 <materialTypes>

			 <materialType>
				 <pixelShaderType type="7" /> 
				 <vertexShaderType type="3" /> 
				 <baseMaterial type="0" /> 
				 <name cname="NORMAL MAPPING" />
				 <vertex shader=
"float4x4 matWorldInverse; 































float4x4 ModelViewMatrix;































float4x4 ModelViewProjectionMatrix;































float3 fvLightPosition1; 































float3 fvLightPosition2; 































float3 fvLightPosition3; 































float3 fvLightPosition4; 































float fLightStrength1; 































float fLightStrength2; 































float fLightStrength3; 































float fLightStrength4; 































struct VS_OUTPUT































{































   float4 Position            : POSITION0;































   float2 Texcoord            : TEXCOORD0;































   float3 ViewDirection      : TEXCOORD1; 































   float3 LightDirection1      : TEXCOORD2; 































   float3 LightDirection2      : TEXCOORD3; 































   float3 LightDirection3      : TEXCOORD4; 































   float3 LightDirection4      : TEXCOORD5; 































   float4 LightDistMultiplier  : TEXCOORD6;































};































float getLengthSQR (float3 vec) 































{ 































   return(vec.x*vec.x+vec.y*vec.y+vec.z*vec.z); 































}  































struct VS_INPUT































{































   float3 Position         : POSITION0;































   float3 Normal           : NORMAL;































   float2 Texcoord         : TEXCOORD0;































};































VS_OUTPUT vertexMain( in VS_INPUT IN ) 































{    































   VS_OUTPUT OUT = (VS_OUTPUT)0;































   OUT.Position = mul(float4(IN.Position,1.0), ModelViewProjectionMatrix);































   OUT.Texcoord = IN.Texcoord;































   































   float4x4 LightTransform= ModelViewMatrix; 































   LightTransform= mul(matWorldInverse, LightTransform);































   float4 fvObjectPosition = mul(float4(IN.Position,1.0), ModelViewProjectionMatrix);































   float4 fvLightPos1 = mul(float4(fvLightPosition1,1.0), LightTransform); 































   float4 fvLightPos2 = mul(float4(fvLightPosition2,1.0), LightTransform); 































   float4 fvLightPos3 = mul(float4(fvLightPosition3,1.0), LightTransform); 































   float4 fvLightPos4 = mul(float4(fvLightPosition4,1.0), LightTransform); 































   float3 fvViewDirection  =  - fvObjectPosition.xyz; 































   float3 fvLightDirection1 = (fvLightPos1.xyz - fvObjectPosition.xyz); 































   float3 fvLightDirection2 = (fvLightPos2.xyz - fvObjectPosition.xyz); 































   float3 fvLightDirection3 = (fvLightPos3.xyz - fvObjectPosition.xyz); 































   float3 fvLightDirection4 = (fvLightPos4.xyz - fvObjectPosition.xyz); 































   































   OUT.LightDistMultiplier[0]=1.0/(getLengthSQR (fvLightDirection1)/(fLightStrength1*10000.0)); 































   OUT.LightDistMultiplier[1]=1.0/(getLengthSQR (fvLightDirection2)/(fLightStrength2*10000.0)); 































   OUT.LightDistMultiplier[2]=1.0/(getLengthSQR (fvLightDirection3)/(fLightStrength3*10000.0)); 































   OUT.LightDistMultiplier[3]=1.0/(getLengthSQR (fvLightDirection4)/(fLightStrength4*10000.0)); 































   































   float3 fvTangent   = -float3(abs(IN.Normal.y) + abs(IN.Normal.z), abs(IN.Normal.x), 0); 































   float3 fvBinormal   = cross(fvTangent,IN.Normal);































   float3 fvNormal     = mul(IN.Normal, ModelViewMatrix); 































   fvTangent         = mul( cross(fvBinormal, IN.Normal), ModelViewMatrix ); 































   fvBinormal         = mul( fvBinormal, ModelViewMatrix ); 































   































   OUT.ViewDirection.x  = dot( fvTangent, fvViewDirection ); 































   OUT.ViewDirection.y  = dot( fvBinormal, fvViewDirection ); 































   OUT.ViewDirection.z  = dot( fvNormal, fvViewDirection ); 































   OUT.LightDirection1.x  = dot( fvTangent, fvLightDirection1.xyz ); 































   OUT.LightDirection1.y  = dot( fvBinormal, fvLightDirection1.xyz ); 































   OUT.LightDirection1.z  = dot( fvNormal, fvLightDirection1.xyz ); 































   OUT.LightDirection2.x  = dot( fvTangent, fvLightDirection2.xyz ); 































   OUT.LightDirection2.y  = dot( fvBinormal, fvLightDirection2.xyz ); 































   OUT.LightDirection2.z  = dot( fvNormal, fvLightDirection2.xyz ); 































   OUT.LightDirection3.x  = dot( fvTangent, fvLightDirection3.xyz ); 































   OUT.LightDirection3.y  = dot( fvBinormal, fvLightDirection3.xyz ); 































   OUT.LightDirection3.z  = dot( fvNormal, fvLightDirection3.xyz ); 































   OUT.LightDirection4.x  = dot( fvTangent, fvLightDirection4.xyz ); 































   OUT.LightDirection4.y  = dot( fvBinormal, fvLightDirection4.xyz ); 































   OUT.LightDirection4.z  = dot( fvNormal, fvLightDirection4.xyz ); 































   































   return OUT;































}































" />
				 <pixel shader=
"float4 fvAmbient;































float4 fvLight1Color; 































float4 fvLight2Color; 































float4 fvLight3Color; 































float4 fvLight4Color; 































float fSpecularPower; 































float fSpecularStrength; 































float fBumpStrength; 































sampler2D baseMap      : register(s0); 































sampler2D bumpMap      : register(s1); 































struct PS_INPUT































{   































   float2 Texcoord            : TEXCOORD0;































   float3 ViewDirection      : TEXCOORD1; 































   float3 LightDirection1      : TEXCOORD2; 































   float3 LightDirection2      : TEXCOORD3;































   float3 LightDirection3      : TEXCOORD4; 































   float3 LightDirection4      : TEXCOORD5; 































   float4 LightDistMultiplier  : TEXCOORD6;































};































float4 pixelMain( in PS_INPUT IN ) : COLOR































{































   float4 color = float4(0,0,0,0);































   float3  fvLightDirection1 = normalize( IN.LightDirection1 ); 































   float3  fvLightDirection2 = normalize( IN.LightDirection2 ); 































   float3  fvLightDirection3 = normalize( IN.LightDirection3 ); 































   float3  fvLightDirection4 = normalize( IN.LightDirection4 ); 































   float3  fvNormal          = tex2D( bumpMap, IN.Texcoord ).yxz; 































   































   fvNormal.xy*=2.0; 































   fvNormal.xy-=1.0;































   fvNormal=(float3(0.0,0.0,1.0)-fvNormal)*fBumpStrength+fvNormal; 































   fvNormal=normalize(fvNormal);































   































   float fNDotL1           = max(dot(fvNormal, fvLightDirection1),0.0)-0.1;  































   float fNDotL2           = max(dot(fvNormal, fvLightDirection2),0.0)-0.1;  































   float fNDotL3           = max(dot(fvNormal, fvLightDirection3),0.0)-0.1;  































   float fNDotL4           = max(dot(fvNormal, fvLightDirection4),0.0)-0.1;  































   float3  fvReflection1     = normalize( ( ( 2.0 * fvNormal )  ) - fvLightDirection1 );  































   float3  fvReflection2     = normalize( ( ( 2.0 * fvNormal )  ) - fvLightDirection2 );  































   float3  fvReflection3     = normalize( ( ( 2.0 * fvNormal )  ) - fvLightDirection3 );  































   float3  fvReflection4     = normalize( ( ( 2.0 * fvNormal )  ) - fvLightDirection4 );  































   float3  fvViewDirection  = normalize( IN.ViewDirection ); 































   float fRDotV1          = max( 0.0, dot( fvReflection1, fvViewDirection ) ); 































   float fRDotV2          = max( 0.0, dot( fvReflection2, fvViewDirection ) ); 































   float fRDotV3          = max( 0.0, dot( fvReflection3, fvViewDirection ) ); 































   float fRDotV4          = max( 0.0, dot( fvReflection4, fvViewDirection ) ); 































   float4  fvBaseColor      = tex2D( baseMap, IN.Texcoord ); 































   float4  fvTotalAmbient   = fvAmbient * fvBaseColor;  































   float4  fvTotalDiffuse   = fvLight1Color * fNDotL1* fvBaseColor*IN.LightDistMultiplier[0];  































   float4  fvTotalSpecular  = fNDotL1*fvLight1Color * ( pow( fRDotV1, fSpecularPower ) )*IN.LightDistMultiplier[0]; 































   fvTotalDiffuse   += fvLight2Color * fNDotL2* fvBaseColor*IN.LightDistMultiplier[1];  































   fvTotalSpecular  += fNDotL2*fvLight2Color * ( pow( fRDotV2, fSpecularPower ) )*IN.LightDistMultiplier[1];   































   fvTotalDiffuse   += fvLight3Color * fNDotL3* fvBaseColor*IN.LightDistMultiplier[2];  































   fvTotalSpecular  += fNDotL3*fvLight3Color * ( pow( fRDotV3, fSpecularPower ) )*IN.LightDistMultiplier[2];   































   fvTotalDiffuse   += fvLight4Color * fNDotL4* fvBaseColor*IN.LightDistMultiplier[3];  































   fvTotalSpecular  += fNDotL4*fvLight4Color * ( pow( fRDotV4, fSpecularPower ) )*IN.LightDistMultiplier[3];   































   color=( fvTotalAmbient + fvTotalDiffuse+ (fvTotalSpecular*fSpecularStrength)); 































   if(color.r>1.0){color.gb+=color.r-1.0;} 































   if(color.g>1.0){color.rb+=color.g-1.0;} 































   if(color.b>1.0){color.rg+=color.b-1.0;} 































   































   return color;































}































" />
				 <constants value="vmatrix4 ModelViewProjectionMatrix proj[0] view[0] world[0] dontMakeInverse







vmatrix4 ModelViewMatrix view[0] world[0] 0 dontMakeInverse







vmatrix4 matWorldInverse world[0] 0 0 makeInverse















vfloat fLightStrength1 80







vfloat fLightStrength2 80







vfloat fLightStrength3 80







vfloat fLightStrength4 80















vvector3df fvLightPosition1 150 640 -34







vvector3df fvLightPosition2 150 640 -34







vvector3df fvLightPosition3 150 640 -34







vvector3df fvLightPosition4 150 640 -34















pSColor fvAmbient 1 0.7 0.7 0.7







pSColor fvLight1Color 1 0.02 0.02 0.02







pSColor fvLight2Color 1 0.02 0.02 0.02







pSColor fvLight3Color 1 0.02 0.02 0.02







pSColor fvLight4Color 1 0.02 0.02 0.02















pfloat fSpecularPower 20







pfloat fSpecularStrength 0.9







pfloat fBumpStrength 50







" />
			 </materialType>

			 <materialType>
				 <pixelShaderType type="7" /> 
				 <vertexShaderType type="3" /> 
				 <baseMaterial type="0" /> 
				 <name cname="CUBE MAPPING" />
				 <vertex shader=
"float3 fvLightPosition1;







                 float3 fvLightPosition2;







                 float3 fvEyePosition;







                 float4x4 matWorld;







                 float4x4 matWorldViewProjection;







                 float4x4 matWorldInv;















struct VS_INPUT 







                   {







                   float4 Position : POSITION0;







                   float2 Texcoord : TEXCOORD0;







                   float3 Normal :   NORMAL0;







                   float3 Binormal : BINORMAL0;







                   float3 Tangent :  TANGENT0;







   







                   };















struct VS_OUTPUT 







                   {







                   float4 Position :        POSITION0;







                   float2 Texcoord :        TEXCOORD0;







                   float3 ViewDirection :   TEXCOORD1;







                   float3 LightDirection1:   TEXCOORD2;







                   float3 LightDirection2:   TEXCOORD3;







                   float3 truViewDir:        TEXCOORD4;







                   float3 truNormal:         TEXCOORD5;







   







                   };















VS_OUTPUT vertexMain( VS_INPUT IN )







                   {







                   VS_OUTPUT OUT;







                   OUT.Position = mul( IN.Position, matWorldViewProjection );







                   OUT.Texcoord = IN.Texcoord;







   







                   float3 RealPos = mul(IN.Position, matWorld);







   







                   float3 viewVec = fvEyePosition - RealPos;







                   OUT.truViewDir=viewVec;







                   float3 lightVec1 = fvLightPosition1 - RealPos;







                   float3 lightVec2 = fvLightPosition2 - RealPos;







   







                   float3 tViewVec;







                   float3 tLightVec1;







                   float3 tLightVec2;















 float3 Tangent = normalize(IN.Tangent);







                   float3 Normal = normalize(IN.Normal);







                   float3 Binormal = cross( Normal , Tangent );







                   Tangent = cross( Normal,Binormal);







   







                   Tangent = mul( matWorldInv,Tangent );







                   Binormal = mul( matWorldInv,Binormal );







                   Normal = mul( matWorldInv,Normal );







                   OUT.truNormal=Normal;







   







                   tViewVec.x = dot(viewVec,Tangent);







                   tViewVec.y = dot(viewVec,Binormal);







                   tViewVec.z = dot(viewVec,Normal);







   







                   tLightVec1.x = dot(lightVec1,Tangent);







                   tLightVec1.y = dot(lightVec1,Binormal);







                   tLightVec1.z = dot(lightVec1,Normal);















 tLightVec2.x = dot(lightVec2,Tangent);







                   tLightVec2.y = dot(lightVec2,Binormal);







                   tLightVec2.z = dot(lightVec2,Normal);







   







                   OUT.ViewDirection = tViewVec;







                   OUT.LightDirection1 = tLightVec1;







                   OUT.LightDirection2 = tLightVec2;







   







                   return( OUT );







                  }







                   " />
				 <pixel shader=
"float4 LightColor1;







                 float4 LightColor2;















sampler2D baseMap;







                   sampler2D bumpMap;







                   sampler2D refMap;















float2 cube2uv(float3 IN){







                   float2 uv=0;







                   float3 inSQ=IN;















if(inSQ.x<0){inSQ.x=-inSQ.x;}







                   if(inSQ.y<0){inSQ.y=-inSQ.y;}







                   if(inSQ.z<0){inSQ.z=-inSQ.z;}















if(inSQ.x>=inSQ.y&&inSQ.x>=inSQ.z){







                   if(IN.x>0){







                   uv.x=0.125;







                   uv.y=0.25;







                   uv.x+=IN.z/IN.x*0.125;







                   uv.y-=IN.y/IN.x*0.25;







                   }else{







                   uv.x=0.625;







                   uv.y=0.25;







                   uv.x+=IN.z/IN.x*0.125;







                   uv.y+=IN.y/IN.x*0.25;







                   }







                   }







                   if(inSQ.y>inSQ.x&&inSQ.y>=inSQ.z){







                   if(IN.y>0){







                   uv.x=0.125;







                   uv.y=0.75;







                   uv.x-=IN.x/IN.y*0.125;







                   uv.y+=IN.z/IN.y*0.25;







                   }else{







                   uv.x=0.625;







                   uv.y=0.75;







                   uv.x+=IN.x/IN.y*0.125;







                   uv.y+=IN.z/IN.y*0.25;







                   }







                   }







                   if(inSQ.z>inSQ.x&&inSQ.z>inSQ.y){







                   if(IN.z>0){







                   uv.x=0.375;







                   uv.y=0.25;







                   uv.x-=IN.x/IN.z*0.125;







                   uv.y-=IN.y/IN.z*0.25;







                   }else{







                   uv.x=0.375;







                   uv.y=0.75;







                   uv.x-=IN.x/IN.z*0.125;







                   uv.y+=IN.y/IN.z*0.25;















 }







                   }







                 















return uv; 







                   }















struct PS_INPUT 







                   {







                   float2 Texcoord :        TEXCOORD0;







                   float3 ViewDirection :   TEXCOORD1;







                   float3 LightDirection1:   TEXCOORD2;







                   float3 LightDirection2:   TEXCOORD3;







                   float3 truViewDir:        TEXCOORD4;







                   float3 truNormal:         TEXCOORD5;







   







                   };















float4 pixelMain( PS_INPUT IN ) : COLOR0







                   { 







                   float4 base = tex2D(baseMap,IN.Texcoord);







                   float3 normal = tex2D(bumpMap,IN.Texcoord);







                   normal = normal*2-1;







   







                   float3 viewDir = normalize(IN.ViewDirection);







   







                   float3 lightDir1 = normalize(IN.LightDirection1);







                   float3 lightDir2 = normalize(IN.LightDirection2);







   







                   normal = normalize(normal);







                   float3 truNormal=normalize(IN.truNormal);







   







                   float3 halfView1 = normalize(viewDir+lightDir1);







                   float3 halfView2 = normalize(viewDir+lightDir2);







                   float3 reflVec = reflect(-IN.truViewDir,truNormal);







                   float4 refl = tex2D(refMap,cube2uv(reflVec));







   







                   float diffuse1 = dot(normal,lightDir1)*1;







                   float specular1 = pow(dot(halfView1,normal),68)*base.w;







   







                   float diffuse2 = dot(normal,lightDir2)*1;







                   float specular2 = pow(dot(halfView2,normal),68)*base.w;







   







                   return(saturate(base *(diffuse1+specular1)*LightColor1 + 







                   base *(diffuse2+specular2)*LightColor2+refl*0.95));







                  }







                   " />
				 <constants value="vvector3df fvLightPosition1 0 100 0







vvector3df fvLightPosition2 0 100 0







vvector3df fvEyePosition camPos4







vmatrix4 matWorld world[0] 0 0 0







vmatrix4 matWorldViewProjection proj[0] view[0] world[0] 0







vmatrix4 matWorldInv world[1] 0 0 0















pSColor LightColor1 0.5 0.5 0.5







pSColor LightColor2 1 0.5 0.5 0.5







" />
			 </materialType>

			 <materialType>
				 <pixelShaderType type="0" /> 
				 <vertexShaderType type="0" /> 
				 <baseMaterial type="0" /> 
				 <name cname="SIMPLE WATER" />
				 <vertex shader=
"float4x4 mWorldViewProj;

float4x4 mWorld;

float4   CamPos;

float    Time;

float    sinWave;



float wavesHeight;





struct VS_OUTPUT

{

  float4 Position   : POSITION0;

  float4 waterpos   : TEXCOORD0;

  float3 WorldView  : TEXCOORD1;

  float2 TexCoords  : TEXCOORD2;

  float3 MultiVar   : TEXCOORD3;

};

VS_OUTPUT vertexMain( float3 Position  : POSITION0,

                      float2 TexCoords : TEXCOORD0 )

{

  VS_OUTPUT OUT = (VS_OUTPUT)0;

  OUT.Position = mul(float4(Position.x,Position.y,Position.z,1.0), mWorldViewProj);

  OUT.waterpos = float4(Position.x,Position.y,Position.z,1.0);

  OUT.MultiVar.y = Time / 10000.0;

  if (sinWave > 0.0)

  {

    OUT.MultiVar.x = (sin((Position.x/3.0) + (Time * 10.0 / 10000.0))) +

                     (cos((Position.z/3.0) + (Time * 10.0 / 10000.0)));

    OUT.Position.y += OUT.MultiVar.x * wavesHeight;

  }

  

  OUT.MultiVar.z = CamPos.y;

  float4 PosW = mul(float4(Position.x,Position.y,Position.z,1.0), mWorld);

  OUT.WorldView = CamPos.xyz - PosW.xyz;

  OUT.TexCoords = TexCoords + float2(OUT.MultiVar.y, OUT.MultiVar.y);

  return(OUT);

}

" />
				 <pixel shader=
"float4x4 mWorldViewProjP;

float    sinWaveP;

float    refractionP;

float    seaLevel;

sampler2D ReflectionTexture : register(s0);

sampler2D NormalMap         : register(s1);

sampler2D DUDVMap           : register(s2);

float4 pixelMain( float4 waterpos   : TEXCOORD0,

                  float3 WorldView  : TEXCOORD1,

                  float2 TexCoord   : TEXCOORD2,

                  float3 MultiVar   : TEXCOORD3

                ) : COLOR0

{

  float4 projCoord = mul(waterpos, mWorldViewProjP);

  projCoord.x = projCoord.x / projCoord.w / 2.0 + 0.5;

  projCoord.y = projCoord.y / projCoord.w / 2.0 + 0.5;

  if (sinWaveP > 0.0)

  {

    projCoord.x += sin(MultiVar.x * 5) * (2 / 1000.0);

    projCoord.y += cos(MultiVar.x * 5) * (2 / 1000.0);

    TexCoord.x  += sin(MultiVar.x * 5) * (5 / 1000.0);

    TexCoord.y  += cos(MultiVar.x * 5) * (5 / 1000.0);

  }

  if (refractionP > 0.0)

  {

    float4 DUDVoffset = tex2D(DUDVMap,TexCoord);

    projCoord.x += (DUDVoffset.x / 40.0) - (1.0 / 80.0);

    projCoord.y += (DUDVoffset.y / 40.0) - (1.0 / 80.0);

  }

  projCoord = clamp(projCoord, 0.001, 0.999);

  float4 normal = float4(0.0, 1.0, 0.0, 0.0);

  if(MultiVar.z < seaLevel)

    projCoord.y = 1.0 - projCoord.y;

  float4 refTex = tex2D(ReflectionTexture,projCoord);

  float facing = (1.0 - max(dot(normalize(WorldView), normalize(normal.xyz)), 0));

  float4 MultCol = float4(0.4,0.7,1.0,0.0);

  

  refTex = (refTex + float4(0.0,0.2,0.0,0.0)) * MultCol;

  float4 norMap =  tex2D(NormalMap,TexCoord);

  float lightComp = 1.0 - max(dot(normalize(norMap.xyz),normalize(abs(WorldView))),0.0);

  float4 finalCol = refTex;

  if(MultiVar.z < seaLevel)

    finalCol *= 0.8;

  finalCol.a = 0.6 + (facing / 2.0);

  finalCol += lightComp;

  return(finalCol);

};

" />
				 <constants value="vmatrix4 mWorld world[0] 0 0 dontMakeInverse

vmatrix4 mWorldViewProj proj[0] view[0] 0 mWorld

pmatrix4 mWorldViewProjP proj[0] view[0] 0 mWorld



vvector3df CamPos camPos4



vfloat Time + ctime realTime

vfloat sinWave 1

pfloat sinWaveP 1

vfloat refractionP 1

pfloat seaLevel -144



vfloat wavesHeight 3

" />
			 </materialType>

			 <materialType>
				 <pixelShaderType type="7" /> 
				 <vertexShaderType type="3" /> 
				 <baseMaterial type="0" /> 
				 <name cname="BETTER WATER" />
				 <vertex shader=
"/*
 * Copyright (c) 2013, elvman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY elvman ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL elvman BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//float4x4    View;
float4x4    WorldViewProj;  // World * View * Projection transformation
float4x4    WorldReflectionViewProj;  // World * Reflection View * Projection transformation

float        WaveLength;

float        Time;
float        WindForce;
float2        WindDirection;

// Vertex shader output structure
struct VS_OUTPUT
{
    float4 position                    : POSITION;   // vertex position
    
    float2 bumpMapTexCoord            : TEXCOORD0;
    float3 refractionMapTexCoord    : TEXCOORD1;
    float3 reflectionMapTexCoord    : TEXCOORD2;
    
    float3 position3D                : TEXCOORD3;
};

struct VS_INPUT
{
    float4 position        : POSITION;
    float4 color        : COLOR0;
    float2 texCoord0    : TEXCOORD0;
};

VS_OUTPUT vertexMain(VS_INPUT input)
{
    VS_OUTPUT output;

    // transform position to clip space
    float4 pos = mul(input.position, WorldViewProj);
    output.position = pos;
    
    // calculate vawe coords
    output.bumpMapTexCoord = input.texCoord0 / WaveLength + Time * WindForce * WindDirection;

    // refraction texcoords
    output.refractionMapTexCoord.x = 0.5 * (pos.w + pos.x);
    output.refractionMapTexCoord.y = 0.5 * (pos.w - pos.y);
    output.refractionMapTexCoord.z = pos.w;
                                
    // reflection texcoords
    pos = mul(input.position, WorldReflectionViewProj);    
    output.reflectionMapTexCoord.x = 0.5 * (pos.w + pos.x);
    output.reflectionMapTexCoord.y = 0.5 * (pos.w - pos.y);
    output.reflectionMapTexCoord.z = pos.w;
    
    // position of the vertex
    output.position3D = input.position;
    
    return output;
}
" />
				 <pixel shader=
"/*
 * Copyright (c) 2013, elvman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY elvman ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL elvman BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

float3        CameraPosition;  // Position of main position
float        WaveHeight;

float4        WaterColor;
float        ColorBlendFactor;

sampler2D    WaterBump; //coverage
sampler2D    RefractionMap; //coverage
sampler2D    ReflectionMap; //coverage

// Pixel shader output structure
struct PS_OUTPUT
{
    float4 color : COLOR0;  // Pixel color    
};

struct PS_INPUT
{
    float4 position                    : POSITION;   // vertex position
    
    float2 bumpMapTexCoord            : TEXCOORD0;
    float3 refractionMapTexCoord    : TEXCOORD1;
    float3 reflectionMapTexCoord    : TEXCOORD2;
        
    float3 position3D                : TEXCOORD3;
};
    
PS_OUTPUT pixelMain( PS_INPUT input )
{ 
    PS_OUTPUT output;
    
    //bump color
    float4 bumpColor = tex2D(WaterBump, input.bumpMapTexCoord);
    float2 perturbation = WaveHeight * (bumpColor.rg - 0.5);
    
    //refraction
    float2 ProjectedRefractionTexCoords = saturate(input.refractionMapTexCoord.xy / input.refractionMapTexCoord.z + perturbation);
    //calculate final refraction color
    float4 refractiveColor = tex2D(RefractionMap, ProjectedRefractionTexCoords );
    
    //reflection
    float2 ProjectedReflectionTexCoords = saturate(input.reflectionMapTexCoord.xy / input.reflectionMapTexCoord.z + perturbation);
    //calculate final reflection color
    float4 reflectiveColor = tex2D(ReflectionMap, ProjectedReflectionTexCoords );

    //fresnel
    float3 eyeVector = normalize(CameraPosition - input.position3D);
    float3 upVector = float3(0.0, 1.0, 0.0);
    
    //fresnel can not be lower than 0
    float fresnelTerm = max( dot(eyeVector, upVector), 0.0 );
    
    float4 combinedColor = refractiveColor * fresnelTerm + reflectiveColor * (1.0 - fresnelTerm);
    
    output.color = ColorBlendFactor * WaterColor + (1.0 - ColorBlendFactor) * combinedColor;

    return output;
}


" />
				 <constants value="vmatrix4 WorldViewProj proj[0] view[0] world[0] 0
vmatrix4 WorldReflectionViewProj proj[0] view[0] world[0] 0
vfloat WaveLength 0.1
vfloat Time + ctime 1000
vfloat WindForce 0.001
vvector2df 10 0

pvector3df CameraPosition camPos
pfloat WaveHeight 1
pSColor WaterColor 1 1 1 1
pfloat ColorBlendFactor 0.1
" />
			 </materialType>


		 </materialTypes>

		 <scripts>


		 </scripts>

	</config>



	<scene>

		 <terrain>

			 <path file="C:/Users/julienmoreau-mathis/Desktop/Soganatsu/SSWE/data/architecture/demo/desertarena/desertarena_art/desertarena_art.obj" />

			 <type esnt="mesh" />

			 <factory> 


			 </factory> 

			 <name c8name="#map:arena" />

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_1_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="1">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_1_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="2">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_skycage_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="3">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/thronecover_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="4">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_skycage_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="0" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="5">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertsandy_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="6">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_clock_floorrug_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="7">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_4_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="8">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_skycage_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="9">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_1_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="10">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_wroughtlron_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="11">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_chair_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="12">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_bighornstatic_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="13">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_wooden_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="14">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_gemcutter_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="15">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_chest_uber_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="16">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_chest_uber_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="17">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_skycage_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="18">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertsand_wavyy_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="19">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertcliffs_2_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="20">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertcliffs_3_d.jpg" />
						 <texture id="1" path="height_maps/rockn.png" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="21">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertcliffs_2_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="22">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertcliffs_2_d.jpg" />
						 <texture id="1" path="height_maps/rockn.png" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="23">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertcliffs_2_d.jpg" />
						 <texture id="1" path="height_maps/rockn.png" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="24">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_wroughtlron_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="25">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_hideout_awnings_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="0" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="26">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_1_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="27">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_coliseum_3_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="28">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_desertsandy_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="29">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/desertarena_art/tex/t_hideout_awnings_d.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="0" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="30">
					 <textures>
						 <texture id="0" path="" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="31">
					 <textures>
						 <texture id="0" path="" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="204" g="204" b="204" a="255" />
					 <ambiantColor r="51" g="51" b="51" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="1" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 </materials>
			 <position X="0.000000" Y="0.000000" Z="0.000000" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="0.010000" Y="0.010000" Z="0.010000" />

			 <visible bool="1" />
			 <shadowMode mode="2" />

		 </terrain>

		 <object>

			 <path file="C:/Users/julienmoreau-mathis/Desktop/Soganatsu/SSWE/data/architecture/demo/desertarena/exopilot/intro walk.x" />

			 <name c8name="#object:cry" />

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="0" g="0" b="0" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="255" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="1.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="1">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/exopilot/exopilot/tex/hatchet.jpg" />
						 <texture id="1" path="data/architecture/demo/desertarena/exopilot/exopilot/tex/hatchet_n.jpg" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="0" g="0" b="0" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="255" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="1.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 	 <material id="2">
					 <textures>
						 <texture id="0" path="data/architecture/demo/desertarena/exopilot/exopilot/tex/exo_pilot.jpg" />
						 <texture id="1" path="data/architecture/demo/desertarena/exopilot/exopilot/tex/exo_pilot_n.jpg" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="0" g="0" b="0" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="255" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="1.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="-1" />

			 	 </material>
			 </materials>
			 <position X="-2.351028" Y="30.534637" Z="13.366665" />
			 <rotation X="0.000000" Y="211.080048" Z="0.000000" />
			 <scale X="0.233333" Y="0.233333" Z="0.233333" />

			 <visible bool="0" />
			 <shadowMode mode="2" />
			 <actions>
			 </actions>

		 </object>

		 <object>

			 <path file="billboard" />

			 <name c8name="#object:new_bill_board" />

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="shaders/textures/lf/sun.png" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="12" />

			 	 </material>
			 </materials>
			 <position X="69.498428" Y="355.000000" Z="425.280945" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="1.000000" Y="1.000000" Z="1.000000" />

			 <visible bool="1" />
			 <shadowMode mode="3" />
			 <actions>
			 </actions>

		 </object>

		 <light>

			 <name c8name="#light:1" />

			 <position X="-450.000000" Y="966.000000" Z="-300.000000" />
			 <target X="0.000000" Y="0.000000" Z="0.000000" />

			 <diffuseColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />
			 <ambiantColor r="0.000000" g="0.000000" b="0.000000" a="1.000000" />
			 <specularColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />

			 <radius value="100.000000" />
			 <farValue value="2000.000000" />
			 <autoRecalculate value="0" />

			 <shadows resol="4096" />

			 <lensFlare>
			 </lensFlare>

		 </light>


	</scene>

</rootScene>
