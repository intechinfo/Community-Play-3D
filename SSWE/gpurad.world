<?xml version="1.0"?>

<rootScene>

	<config>

		 <numberOfObjects value="0" />

		 <grid>

			 <accentLineOffset ALO="8" />
			 <size S="1024" />
			 <spacing SP="8" />

		 </grid>

		 <camera>

			 <position X="84.970100" Y="-2.254381" Z="0.000000" />
			 <rotation X="358.480225" Y="270.000000" Z="0.000000" />

		 </camera>

		 <fpsCameraSettings>

			 <ellipsoidRadius X="30.000000" Y="60.000000" Z="30.000000" />
			 <gravityPerSecond X="0.000000" Y="-10.000000" Z="0.000000" />
			 <ellipsoidTranslation X="0.000000" Y="0.000000" Z="0.000000" />
			 <slidingValue value="0.000500" />

		 </fpsCameraSettings>

		 <effect>


		 </effect>

		 <materialTypes>

			 <materialType>
				 <pixelShaderType type="0" /> 
				 <vertexShaderType type="0" /> 
				 <baseMaterial type="0" /> 
				 <name cname="New Material Type" />
				 <vertex shader=
"float4x4 WorldViewProj;

struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

struct VertexShaderInput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

VertexShaderOutput vertexMain(VertexShaderInput input) {
    VertexShaderOutput output = (VertexShaderOutput)0;
    
    output.tcoords = input.tcoords.xy*float2(1.0, -1.0);
    float2 scrn = input.tcoords.xy;
    output.Position = float4(scrn*2.0-1.0, 0.0, 1.0);
    
    return output;
}
" />
				 <pixel shader=
"sampler2D tex : register(s0);
sampler2D tex2 : register(s1);
struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

float4 pixelMain(VertexShaderOutput input) : COLOR0 {
    float4 col = tex2D(tex, input.tcoords*float2(1.0, -1.0));
    return pow(float4(col.rgba*col.a), 2.2);
}
" />
				 <constants value="" />
			 </materialType>

			 <materialType>
				 <pixelShaderType type="4" /> 
				 <vertexShaderType type="1" /> 
				 <baseMaterial type="0" /> 
				 <name cname="New Material Type" />
				 <vertex shader=
"float4x4 WorldViewProj;

struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
    float2 tcoords1 : TEXCOORD1;
};

struct VertexShaderInput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
    float2 tcoords1 : TEXCOORD1;
};

VertexShaderOutput vertexMain(VertexShaderInput input) {
    VertexShaderOutput output = (VertexShaderOutput)0;

    output.tcoords = input.tcoords.xy;
    float2 scrn= input.tcoords1.xy;
    scrn.y=1.0-scrn.y;
    output.Position = float4(scrn*2.0-1.0, 0.0, 1.0);
    
    return output;
}
" />
				 <pixel shader=
"sampler2D tex : register(s0);

struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
    float2 tcoords1 : TEXCOORD1;
};

float4 pixelMain(VertexShaderOutput input) : COLOR0 {
    float4 col = tex2D(tex, input.tcoords);
    return col*col.a;
}
" />
				 <constants value="" />
			 </materialType>

			 <materialType>
				 <pixelShaderType type="0" /> 
				 <vertexShaderType type="0" /> 
				 <baseMaterial type="0" /> 
				 <name cname="New Material Type" />
				 <vertex shader=
"float4x4 WorldViewProj;

struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

struct VertexShaderInput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

VertexShaderOutput vertexMain(VertexShaderInput input) {
    VertexShaderOutput output = (VertexShaderOutput)0;

    output.tcoords = input.tcoords*float2(1.0,-1.0);
    float2 scrn = input.tcoords;
    output.Position = float4(scrn*2.0-1.0, 0.0, 1.0);
    
    return output;
}" />
				 <pixel shader=
"sampler2D tex : register(s0);
sampler2D tex2 : register(s1);

struct VertexShaderOutput {
    float4 Position : POSITION0;
    float2 tcoords : TEXCOORD0;
};

float4 pixelMain(VertexShaderOutput input) : COLOR0 {
    float4 col = tex2D(tex, input.tcoords*float2(1.0,-1.0)) + tex2D(tex2, input.tcoords);

    return col;
}" />
				 <constants value="" />
			 </materialType>


		 </materialTypes>

		 <scripts>


		 </scripts>

	</config>



	<scene>


	</scene>

</rootScene>
