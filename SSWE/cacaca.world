<?xml version="1.0"?>

<rootScene>

	<config>

		 <numberOfObjects value="3" />

		 <grid>

			 <accentLineOffset ALO="8" />
			 <size S="1024" />
			 <spacing SP="8" />

		 </grid>

		 <camera>

			 <position X="36.181629" Y="53.755455" Z="71.111084" />
			 <rotation X="44.072899" Y="211.964233" Z="0.000000" />

		 </camera>

		 <fpsCameraSettings>

			 <ellipsoidRadius X="30.000000" Y="60.000000" Z="30.000000" />
			 <gravityPerSecond X="0.000000" Y="-10.000000" Z="0.000000" />
			 <ellipsoidTranslation X="0.000000" Y="0.000000" Z="0.000000" />
			 <slidingValue value="0.000500" />

		 </fpsCameraSettings>

		 <depthPassEnabled enabled="1" />
		 <lightScaterringPassEnabled enabled="0" />
		 <reflectionPassEnabled enabled="1" />

		 <effect>

			 <postProcessingEffect>
				 <ppeName name="/sepia_toon_shader.hlsl" />
				 <ppeShader shader="//------------------------------ TEXTURE PROPERTIES ----------------------------
// This is the texture that SpriteBatch will try to set before drawing
texture ScreenTexture;
 
// Our sampler for the texture, which is just going to be pretty simple
sampler TextureSampler = sampler_state
{
    Texture = <ScreenTexture>;
};
 
//------------------------ PIXEL SHADER ----------------------------------------
// This pixel shader will simply look up the color of the texture at the
// requested point, and turns it into a sepia tone
float4 pixelMain(float2 TextureCoordinate : TEXCOORD0) : COLOR0
{
    float4 color = tex2D(TextureSampler, TextureCoordinate);
 
    float4 outputColor = color;
    outputColor.r = (color.r * 0.393) + (color.g * 0.769) + (color.b * 0.189);
    outputColor.g = (color.r * 0.349) + (color.g * 0.686) + (color.b * 0.168);    
    outputColor.b = (color.r * 0.272) + (color.g * 0.534) + (color.b * 0.131);
 
    return outputColor;
}
 
//-------------------------- TECHNIQUES ----------------------------------------
// This technique is pretty simple - only one pass, and only a pixel shader
technique Sepia
{
    pass Pass1
    {
        PixelShader = compile ps_2_0 pixelMain();
    }
}
" />
				 <ppeCallback callback="" />
			 </postProcessingEffect>

			 <postProcessingEffect>
				 <ppeName name="/bloomp.hlsl" />
				 <ppeShader shader="sampler2D ColorMapSampler : register(s0);
sampler2D ScreenMapSampler : register(s1);

float4 pixelMain(float2 TexCoords : TEXCOORD0) : COLOR0
{		
	float4 screenCol = tex2D(ScreenMapSampler, TexCoords);
	float4 bloomCol = tex2D(ColorMapSampler, TexCoords);
	
	return(screenCol * 0.9 + bloomCol * 0.5);
}
" />
				 <ppeCallback callback="" />
			 </postProcessingEffect>

			 <postProcessingEffect>
				 <ppeName name="/bloomp.hlsl" />
				 <ppeShader shader="sampler2D ColorMapSampler : register(s0);
sampler2D ReflectionSampler : register(s1);
sampler2D NormalSampler : register(s2);

float4 pixelMain(float2 TexCoords : TEXCOORD0) : COLOR0
{
    float4 cms = tex2D(ColorMapSampler, TexCoords)
    + tex2D(ReflectionSampler, float2(TexCoords.x, -TexCoords.y))
    * tex2D(NormalSampler, TexCoords).g * 0.2;
    
    return cms;
}
" />
				 <ppeCallback callback="filter:setRttTextureAtIndex(1, &quotReflectionPassRTT&quot)
filter:setRttTextureAtIndex(2, &quotNormalPassRTT&quot)
" />
			 </postProcessingEffect>


		 </effect>

		 <materialTypes>


		 </materialTypes>

		 <scripts>


		 </scripts>

		 <physics>
			 <gravity X="0.000000" Y="-50.000000" Z="0.000000" />
		 </physics>

	</config>



	<scene>

		 <object>

			 <path file="hillPlaneMesh" />

			 <name c8name="#object:new_hille_plane_mesh" />

			 <factory> 

				 <meshFactory>
				 <tangents value="0" />
				 <normals value="0" />
				 <angleWeighted value="0" />
				 <smooth value="0" />
				 </meshFactory>
				 <planarMapping>
				 <planarMapped value="1" />
				 <planarMappedValue value="0.020000" />
				 </planarMapping>

			 </factory> 

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="shaders/textures/predefined/diffuse.tga" />
						 <texture id="1" path="shaders/textures/predefined/normal.tga" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="0" />

			 	 </material>
			 </materials>
			 <position X="0.000000" Y="0.000000" Z="0.000000" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="1.000000" Y="1.000000" Z="1.000000" />

			<depthPassed value="1" />
			<lightScatteringPassed value="0" />

			 <visible bool="1" />
			 <shadowMode mode="0" />
			 <actions>
			 </actions>

			 <physics>
			 	 <body type="0">
			 	 </body>
			 </physics>

		 </object>

		 <object>

			 <path file="cube" />

			 <name c8name="#object:new_cube" />

			 <factory> 

				 <meshFactory>
				 <tangents value="0" />
				 <normals value="0" />
				 <angleWeighted value="0" />
				 <smooth value="0" />
				 </meshFactory>
				 <planarMapping>
				 <planarMapped value="0" />
				 <planarMappedValue value="0.000000" />
				 </planarMapping>

			 </factory> 

			 <materials>
			 	 <material id="0">
					 <textures>
						 <texture id="0" path="data/lights/tech-texture-geometry-cubes-color_090424.jpg" />
						 <texture id="1" path="" />
						 <texture id="2" path="" />
						 <texture id="3" path="" />
					 <textures>

					 <diffuseColor r="255" g="255" b="255" a="255" />
					 <ambiantColor r="255" g="255" b="255" a="255" />
					 <specularColor r="255" g="255" b="255" a="255" />
					 <emissiveColor r="0" g="0" b="0" a="0" />

					 <lighting value="0" />

					 <materialTypeParam1 value="0.000000" />
					 <materialTypeParam2 value="0.000000" />

					 <shininess value="0.000000" />
					 <thickness value="1.000000" />

					 <antiAliasing value="1" />
					 <backfaceCulling value="1" />
					 <colorMask value="15" />
					 <colorMaterial value="1" />
					 <fogEnable value="0" />
					 <frontfaceCulling value="0" />
					 <gouraudShading value="1" />
					 <normalizeNormals value="0" />
					 <zBuffer value="1" />
					 <zWriteEnable value="1" />

					 <materianType value="0" />

			 	 </material>
			 </materials>
			 <position X="0.000000" Y="25.000000" Z="0.000000" />
			 <rotation X="0.000000" Y="0.000000" Z="0.000000" />
			 <scale X="1.000000" Y="1.000000" Z="1.000000" />

			<depthPassed value="1" />
			<lightScatteringPassed value="0" />

			 <visible bool="1" />
			 <shadowMode mode="2" />
			 <actions>
			 </actions>

			 <physics>
			 	 <body type="0">
			 	 </body>
			 </physics>

		 </object>

		 <light>

			 <name c8name="#light:new_light" />

			 <position X="74.771866" Y="200.000000" Z="-103.018127" />
			 <target X="70.000000" Y="0.000000" Z="0.000000" />

			 <diffuseColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />
			 <ambiantColor r="0.000000" g="0.000000" b="0.000000" a="1.000000" />
			 <specularColor r="1.000000" g="1.000000" b="1.000000" a="1.000000" />

			 <radius value="100.000000" />
			 <farValue value="1000.000000" />
			 <autoRecalculate value="0" />

			 <shadows resol="4096" />

			 <lensFlare>
				 <mesh> 
					 <scale X="5.000000" Y="5.000000" Z="5.000000" />
					 <texture path="shaders/textures/lf/mesh.png" />
				 </mesh> 
				 <bill> 
					 <size Width="20.000000" Height="20.000000" />
					 <texture path="shaders/textures/lf/sun.png" />
				 </bill> 
				 <lfsn> 
					 <strength value="1000.000000" />
					 <texture path="shaders/textures/lf/flare.png" />
					 <falseOcclusion value="0" />
				 </lfsn> 
				 <position X="0.000000" Y="0.000000" Z="0.000000" />
 			 </lensFlare>

		 </light>


	</scene>

</rootScene>
